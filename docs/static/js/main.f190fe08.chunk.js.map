{"version":3,"sources":["component/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","component/GifGridItem.js","component/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","console","error","categorias","type","value","onChange","target","getGifs","url","apiKey","limite","categoria","a","params","api_key","limit","q","encodeURI","Object","keys","map","key","index","fetch","resp","json","data","gifs","img","id","title","images","downsized_medium","ESTADO_OK","useFetchGifs","estadoInicial","loading","estado","setEstado","useEffect","then","Error","catch","err","message","GifGridItem","className","src","alt","GifGrid","imagenes","class","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"+MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAiB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,EAC3BC,QAAQC,MAAM,8EAGlBV,GAAe,SAAAW,GAAU,OAAKT,GAAL,mBAAoBS,OAC7CR,EAAc,MAId,SACE,uBAAOS,KAAK,OACLC,MAAQX,EACRY,SAlBa,SAACT,GACvBF,EAAeE,EAAEU,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAOC,EAAKC,EAAQC,EAAQC,GAA5B,uBAAAC,EAAA,6DACfC,EAAS,CAAEC,QAAQL,EAAQM,MAAML,EAAQM,EAAGC,UAAWN,IAC3DO,OAAOC,KAAKN,GAAQO,KAAK,SAACC,EAAKC,GAAN,OAAgBd,GAAG,UAAgB,GAATc,EAAa,IAAM,KAA1B,OAAgCD,EAAhC,YAAuCR,EAAOQ,OAFvE,SAGAE,MAAMf,GAHN,cAGbgB,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKN,KAAI,SAAAQ,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXtB,IAAG,UAAEoB,EAAIG,cAAN,aAAE,EAAYC,iBAAiBxB,QATvB,kBAYZmB,GAZY,4CAAH,4DCIPM,EAAY,KACZC,EAAe,SAAEvB,GAC1B,IAAMwB,EAAgB,CAACT,KAAK,GAAIU,SAAQ,EAAMC,OAAOJ,GADZ,EAEbzC,mBAAS2C,GAFI,mBAElCE,EAFkC,KAE1BC,EAF0B,KAqBzC,OAjBAC,qBAAW,WACPhC,EAAQ,uCACA,mCACA,GACAI,GACC6B,MAAM,SAAAb,GACH,GAAmB,GAAfA,EAAK5B,OACL,MAAM,IAAI0C,MAAM,+CACpBH,EAAW,CAACZ,KAAKC,EACMS,SAAQ,EACRC,OAAOJ,OAEjCS,OAAO,SAAAC,GAAG,OAAIL,EAAW,CAACZ,KAAK,GACLU,SAAQ,EACRC,OAAOM,EAAIC,eAChD,CAAEjC,IAEG0B,GCvBEQ,EAAc,SAAC,GAAuB,EAArBhB,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOtB,EAAU,EAAVA,IAErC,OACI,sBAAKsC,UAAU,yCAAf,UACI,qBAAKC,IAAKvC,EAAKwC,IAAKlB,IACpB,4BAAIA,QCJHmB,EAAU,SAAC,GAAiB,IAAhBtC,EAAe,EAAfA,UAAe,EAESuB,EAAavB,GAA9CuC,EAFwB,EAE7BxB,KAAcU,EAFe,EAEfA,QAAenC,EAFA,EAEPoC,OAE7B,OACI,qCACI,6BAAM1B,IACJyB,GAAW,mBAAGe,MAAM,mCAAT,yBACXlD,GAASgC,EACP,qBAAKa,UAAU,YAAf,SAEII,EAAS9B,KAAI,SAAAQ,GAAG,OACZ,cAAC,EAAD,eACiBA,GADEA,EAAIC,SAK/B,4BAAI5B,QCdPmD,EAAe,WAAO,IAAD,EAEM5D,mBAAS,IAFf,mBAEvBU,EAFuB,KAEXX,EAFW,KAI9B,OACI,gCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQW,EAAWkB,KAAK,SAAAT,GAAS,OACrB,cAAC,EAAD,CACSA,UAAYA,GADNA,Y,MCdvC0C,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,eAAe,W","file":"static/js/main.f190fe08.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategorias }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length < 3) {\r\n            console.error('Para ingresar un nuevo elemento debe tener al menos 3 caracteres de largo');\r\n            return;\r\n        }\r\n        setCategorias( categorias => [inputValue, ...categorias] ); \r\n        setInputValue('');\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n          <input type='text'\r\n                 value={ inputValue }\r\n                 onChange={ handleInputChange }/>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategorias : PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (url, apiKey, limite, categoria)=> {\r\n    let params = { api_key:apiKey, limit:limite, q: encodeURI( categoria ) };\r\n    Object.keys(params).map( (key, index) => url += `${index == 0 ? '?' : '&'}${key}=${params[key]}` );\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        };\r\n    });\r\n    return gifs;\r\n}","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const ESTADO_OK = 'OK';\r\nexport const useFetchGifs = ( categoria ) => {\r\n    const estadoInicial = {data:[], loading:true, estado:ESTADO_OK};\r\n    const [estado, setEstado] = useState(estadoInicial);\r\n\r\n    useEffect( () => {\r\n        getGifs('https://api.giphy.com/v1/gifs/search', \r\n                '7fu47BcWMQD2SA8XzBFSGVZiqNByFauK', \r\n                10, \r\n                categoria)\r\n                .then( gifs => {\r\n                    if (gifs.length == 0)\r\n                        throw new Error('No se encontraron GIF con el criterio usado')\r\n                    setEstado( {data:gifs, \r\n                                           loading:false, \r\n                                           estado:ESTADO_OK} )\r\n                    })\r\n                .catch( err => setEstado( {data:[], \r\n                                           loading:false, \r\n                                           estado:err.message} ));\r\n    },[ categoria ]);\r\n\r\n    return estado;\r\n}\r\n\r\nexport default useFetchGifs;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    //console.log(imagen);\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { useFetchGifs, ESTADO_OK } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({categoria}) => {\r\n    \r\n    const {data:imagenes,loading,estado:error} = useFetchGifs(categoria);\r\n\r\n    return (\r\n        <> \r\n            <h3>{ categoria }</h3>\r\n            { loading && <p class='animate__animated animate__flash'>Cargando...</p> } \r\n            { error == ESTADO_OK ?\r\n                <div className='card-grid'>\r\n                {\r\n                    imagenes.map(img => \r\n                        <GifGridItem key={ img.id } \r\n                                    { ...img } />)\r\n                }\r\n                </div> \r\n                :\r\n                <p>{error}</p>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './component/AddCategory';\r\nimport { GifGrid } from './component/GifGrid';\r\n\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategorias={ setCategorias }/>\r\n            <hr/>\r\n            <ol>\r\n                { \r\n                    categorias.map( categoria => \r\n                        <GifGrid key={ categoria } \r\n                                 categoria={ categoria }/> \r\n                    )\r\n                }\r\n            </ol>\r\n        </div>\r\n          \r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />,document.getElementById('root'));\n\n"],"sourceRoot":""}